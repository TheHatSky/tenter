# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      REDESIGN_ALBUM: ${{ secrets.REDESIGN_ALBUM }}
      CLIENT_ID: ${{ secrets.CLIENT_ID }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Use Node.js 10
        uses: actions/setup-node@v2
        with:
          node-version: 10.x

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Build
        run: |
          yarn
          yarn webpack --config ./webpack.utils.config.ts --mode production --env.REDESIGN_ALBUM $REDESIGN_ALBUM --env.CLIENT_ID $CLIENT_ID
          yarn webpack --mode production
          yarn test

      - name: Prepare tar file
        run: |
          rm -rf ./node_modules
          rm -rf ./.git
          rm -rf ./deploy 
          rm -rf ./js
          rm -rf ./utils
          rm -rf ./typings
          tar -czf release.tar.gz *

      - name: Upload release
        uses: actions/upload-artifact@v2
        with:
          name: release
          path: release.tar.gz

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Download release
        uses: actions/download-artifact@v2
        with:
          name: release

      - name: Send tar to prod
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          source: "release.tar.gz"
          target: "/home/travis"
          overwrite: true

      - name: Unzip on prod
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          script: |
            tar -xf release.tar.gz -C /var/www/tenter.me/html/
            cd /var/www/tenter.me/html/
            node ./dist/utils.js
            rm /var/www/tenter.me/html/dist/utils.js
